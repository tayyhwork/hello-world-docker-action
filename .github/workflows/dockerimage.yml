name: Docker Image CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: docker login
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}   
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}  
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD 
        
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag tayyhwork/hello-world-docker-action:latest
        
      - name: docker push
        run: |
          docker push tayyhwork/hello-world-docker-action
          
      - name: Tag the image
        run: |
          docker tag tayyhwork/hello-world-docker-action:latest tayyhwork/dct-demo-01:1
          docker push tayyhwork/dct-demo-01:1
                  
      - name: Create file containing Code Signing Certificate and Delegation Private Key
        run: |
            echo "${{secrets.CERTIFICATE_KEY}}" > cert_key_01.key
            chmod 600 cert_key_01.key
            echo "${{secrets.CERTIFICATE}}" > cert_01.crt
            chmod 600 cert_01.crt         
      
      - name: Load the key into trust store
        run: |
         docker trust key load cert_key_01.key --name dock_cert_key_01 <<EOF
           ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
           ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
         EOF
         
      - name: Add the delegation public key
        run: |
          { echo '${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}';
            echo '${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}';
            sleep 15 && echo '${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}';
            echo '${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}';
          } | docker trust signer add --key cert_key_01.key dock_cert_key_01 tayyhwork/dct-demo-01:1         
      
                  
      - name: Tag the signed image
        run: |
         docker tag tayyhwork/dct-demo-01:1 tayyhwork/dct-demo-01:1-signed
      
      - name: Sign the image
        run: |
          docker trust sign tayyhwork/dct-demo-01:1-signed <<EOF
           ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
           ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
           EOF     
          
      - name: Push the signed image
        run: |    
          docker push tayyhwork/dct-demo-01:1-signed
      
      - name: DCT On
        run: |      
          export DOCKER_CONTENT_TRUST=1  
          
      - name: Pull the unsigned image (fail) 
        run: |    
          docker pull tayyhwork/dct-demo-01:1    
      
      - name: DCT Off
        run: |      
          export DOCKER_CONTENT_TRUST=0 
        
      - name: Pull the unsigned image (pass)
        run: |    
          docker pull tayyhwork/dct-demo-01:1    
      
      - name: Upload image
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: tayyhwork/dct-demo-01:1-signed
      
      - name: Download image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: tayyhwork/dct-demo-01:1-signed
      
      - name: Link to the network drive
        run: |  
          sudo mkdir /TarDir
          sudo mount -t cifs //${{secrets.AZURE_USER }}.file.core.windows.net/sharefile /TarDir -o vers=3.0,username=${{secrets.AZURE_USER }},password=${{ secrets.AZURE_PASS }},dir_mode=0777,file_mode=0777
      
      - name: Tar and copy the image for transferring
        run: | 
          docker save tayyhwork/dct-demo-01:1-signed | gzip > dct-demo-01:1-signed.tar.gz
          cp dct-demo-01:1-signed.tar.gz /TarDir
